{"version":3,"sources":["logo.svg","Usurvey.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","firebase","require","uuid","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","Usurvey","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","uid","v1","studentName","answers","answer1","answer2","answer3","isSubmitted","nameSubmit","bind","assertThisInitialized","answerSelected","questionSubmit","event","refs","name","value","setState","console","log","target","database","ref","set","questions","react_default","a","createElement","onSubmit","className","type","placeholder","onChange","Component","App","src","logo","alt","src_Usurvey","href","rel","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.dad1336e.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, { Component } from 'react';\r\nvar firebase = require('firebase');\r\nvar uuid = require('uuid');\r\n\r\nvar config = {\r\n    apiKey: \"AIzaSyB5co-WXRzjLMMsh7EZCo703qIeGNAP2n0\",\r\n    authDomain: \"usurvey-a123a.firebaseapp.com\",\r\n    databaseURL: \"https://usurvey-a123a.firebaseio.com\",\r\n    projectId: \"usurvey-a123a\",\r\n    storageBucket: \"usurvey-a123a.appspot.com\",\r\n    messagingSenderId: \"1089431572247\"\r\n  };\r\n  firebase.initializeApp(config);\r\n\r\nclass Usurvey extends Component {\r\n  nameSubmit(event){\r\n    var studentName = this.refs.name.value;\r\n    this.setState({studentName: studentName}, function(){\r\n      console.log(this.state);\r\n    });\r\n  }\r\n  answerSelected(event) {\r\n    var answers = this.state.answers;\r\n    if(event.target.name === 'answer1'){\r\n      answers.answer1 = event.target.value;\r\n    } else if(event.target.name === 'answer2'){\r\n        answers.answer2 = event.target.value;\r\n      } else if(event.target.name === 'answer3'){\r\n          answers.answer3 = event.target.value;\r\n        }\r\n\r\n        this.setState({answers: answers}, function(){\r\n          console.log(this.state);\r\n        });\r\n  }\r\n\r\n  questionSubmit(){\r\n    firebase.database().ref('uSurvey/'+this.state.uid).set({\r\n      studentName: this.state.studentName,\r\n      answers: this.state.answers\r\n    });\r\n    this.setState({isSubmitted: true});\r\n  }\r\n\r\n  constructor(props){\r\n    super(props);\r\n\r\n    this.state = {\r\n      uid: uuid.v1(),\r\n      studentName: '',\r\n      answers: {\r\n        answer1: '',\r\n        answer2: '',\r\n        answer3: ''\r\n      },\r\n      isSubmitted: false\r\n    };\r\n    this.nameSubmit = this.nameSubmit.bind(this);\r\n    this.answerSelected = this.answerSelected.bind(this);\r\n    this.questionSubmit = this.questionSubmit.bind(this);\r\n  }\r\n  render(){\r\n    var studentName;\r\n    var questions;\r\n\r\n    if(this.state.studentName === '' && this.state.isSubmitted === false) {\r\n      studentName = <div>\r\n        <h1>Hey, please let us know your name. </h1>\r\n        <form onSubmit={this.nameSubmit}>\r\n          <input className=\"namy\" type=\"text\" placeholder=\"Enter your name\" ref=\"name\"/>\r\n        </form>\r\n      </div>;\r\n      questions = ''\r\n    } else if (this.state.studentName !== '' && this.state.isSubmitted === false) {\r\n      studentName = <h1> This is a survey, {this.state.studentName} </h1>;\r\n        questions =\r\n        <div>\r\n          <h2>Here are some questions: </h2>\r\n          <form onSubmit={this.questionSubmit}>\r\n            <div className =\"card\">\r\n              <label>What kind of courses do you like the most: </label> <br />\r\n              <input type=\"radio\" name=\"answer1\" value=\"Technology\" onChange={this.answerSelected}/>Technology\r\n                <input type=\"radio\" name=\"answer1\" value=\"Design\" onChange={this.answerSelected}/>Design\r\n                  <input type=\"radio\" name=\"answer1\" value=\"Marketing\" onChange={this.answerSelected}/>Marketing\r\n            </div>\r\n\r\n            <div className =\"card\">\r\n              <label>You are: </label> <br />\r\n              <input type=\"radio\" name=\"answer2\" value=\"Student\" onChange={this.answerSelected}/>Student\r\n                <input type=\"radio\" name=\"answer2\" value=\"in-a-job\" onChange={this.answerSelected}/>Employed\r\n                  <input type=\"radio\" name=\"answer2\" value=\"looking-for-a-job\" onChange={this.answerSelected}/>Job hunting\r\n            </div>\r\n\r\n            <div className =\"card\">\r\n              <label>Is online learning helpful: </label> <br />\r\n              <input type=\"radio\" name=\"answer3\" value=\"yes\" onChange={this.answerSelected}/>Yes\r\n                <input type=\"radio\" name=\"answer3\" value=\"no\" onChange={this.answerSelected}/>No\r\n                  <input type=\"radio\" name=\"answer3\" value=\"maybe\" onChange={this.answerSelected}/>Maybe\r\n            </div>\r\n            <input className=\"feedback-button\" type=\"submit\" value=\"submit\" />\r\n          </form>\r\n        </div>\r\n    } else if(this.state.isSubmitted === true){\r\n      studentName = <h1> Thanks, {this.state.studentName} </h1>\r\n    }\r\n\r\n    return(\r\n      <div>\r\n        {studentName}\r\n        -------------------------------\r\n        {questions}\r\n        -------------------------------\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Usurvey;\r\n","import React, { Component } from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport Usurvey from './Usurvey';\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <img src={logo} className=\"App-logo\" alt=\"logo\" />\n            <Usurvey />\n          <a\n            className=\"App-link\"\n            href=\"https://reactjs.org\"\n            target=\"_blank\"\n            rel=\"noopener noreferrer\"\n          >\n            Learn React\n          </a>\n        </header>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}